const stringToType = require('utils/stringToType');

// parses an lnd.conf formatted string and returns a JavaScript object
const parse = (lndConfigString) => {
  const lines = lndConfigString.split(/\r?\n/).filter(line => line.trim() !== '');
  
  const configObject = {};
  for (const line of lines) {
    if (line.startsWith('#') || line.startsWith(';') || line.startsWith('[')) continue;
    // only split on the first "=", to allow for "=" in values (e.g., alias=my node = awesome)
    const [key, value] = line.split(/=(.*)/);
    if (MULTILINE_KEYS.includes(key)) {
      if (! (key in configObject)) {
        configObject[key] = [];
      }
      // whitespace trimmed to handle user lnd.conf files with extra whitespace
      configObject[key].push(value.trim());
    } else {
      // whitespace trimmed to handle user lnd.conf files with extra whitespace
      configObject[key] = value.trim();
    }
  }
  return configObject;
}

// returns an lnd.conf formatted string from a JavaScript object
const generate = (configObject) => {
  let lndConfigString = `# This file is automatically generated by Umbrel, any changes will be overwritten.\n# Generated at: ${new Date().toISOString()}`;

  for (const [key, value] of Object.entries(configObject)) {
    // alias guard clause here is to allow lnd to generate default alias if user doesn't set one
    if (key === "alias" && value === "") continue;
    if (Array.isArray(value)) {
      for (const item of value) {
        lndConfigString += `\n${key}=${item}`;
      }
    } else {
      lndConfigString += `\n${key}=${value}`;
    }
  }

  return lndConfigString;
}

// extracts the umbrel-managed settings from the config
// and applies the correct data types to the values
// There are currently no multi-line settings (e.g., tlsextraip) that are managed by the app.
// If/when multi-line keys are added, this function should we modified to handle merging multi-line settings into umbrel-lnd.conf
const getManagedConfig = (config, allowedConfig) => {
  let managedConfig = {};

  for (const [key, value] of Object.entries(config)) {
    if (key in allowedConfig) {
      // stringToType is used to convert strings-values from a users lnd.conf to correct type.
      try {
        managedConfig[key] = stringToType(key, value);
      } catch (error) {
        // if the user has an invalid boolean value in their lnd.conf, we log the error and ignore it
        console.log("Failed to parse LND configuration.", error.message);
      }
    }
  }

  return managedConfig;
}

// Full list of settings - https://github.com/lightningnetwork/lnd/blob/master/sample-lnd.conf
const MULTILINE_KEYS = [
  'tlsextraip',
  'tlsextradomain',
  'externalhosts',
  'listen',
  'rpclisten',
  'restlisten',
  'restcors',
  'addpeer',
  'bitcoin.dnsseed',
  'watchtower.listen',
  'rpcmiddleware.addmandatory',
  'gossip.pinned-syncers'
];

module.exports = {
  parse,
  generate,
  getManagedConfig
}
